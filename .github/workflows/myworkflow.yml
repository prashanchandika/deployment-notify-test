name: Test Workflow
on:
  push:
    branches:
      - main

permissions:
  contents: read

env:
  ENV: "test"

jobs:
  job1:
    name: Job1
    runs-on: ubuntu-latest
    steps:
      - name: Start Deployment Timer
        if: always()
        id: start-time
        run: echo "START_TIME=$(date +%s)" >> $GITHUB_ENV
      - name: Test Step
        run: |
          echo "sleeping for 5"
          sleep 10

  job2:
    name: Job2
    runs-on: ubuntu-latest
    steps:
      - name: Test Step
        run: |
          echo "sleeping for 5"
          sleep 10
          exit 1  # Simulating failure

  notify:
    runs-on: ubuntu-latest
    needs: [job1, job2]  # Monitor all jobs
    if: always()  # Runs even if jobs fail
    steps:
      - name: Convert Needs to JSON
        run: |
          echo '${{ toJSON(needs) }}' > needs.json
          cat needs.json  # Debugging output

      - name: Determine Failed Jobs
        run: |
          FAILED_JOBS=""
          for job in $(jq -r 'keys[]' needs.json); do
            RESULT=$(jq -r ".\"$job\".result" needs.json)
            if [[ "$RESULT" == "failure" ]]; then
              FAILED_JOBS+="❌ $job failed\n"
            fi
          done

          if [[ -z "$FAILED_JOBS" ]]; then
            echo "WORKFLOW_STATUS=✅ All jobs succeeded!" >> $GITHUB_ENV
          else
            echo -e "$FAILED_JOBS" > failed_jobs.txt
            echo "WORKFLOW_STATUS=❌ Some jobs failed!" >> $GITHUB_ENV
          fi

      - name: Capture End Time
        run: echo "END_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: Send Notification
        run: |
          echo "🚀 Workflow Status: ${{ env.WORKFLOW_STATUS }}"
          cat failed_jobs.txt 2>/dev/null || echo "No failures"
          DEPLOY_TIME=$((END_TIME - START_TIME))
          echo "DEPLOY_TIME=$((DEPLOY_TIME / 60))m $((DEPLOY_TIME % 60))s"
